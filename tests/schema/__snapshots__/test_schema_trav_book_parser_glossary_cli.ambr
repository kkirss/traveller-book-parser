# serializer version: 1
# name: test_schema_trav_book_parser_glossary_cli[TravBookParserGlossary-True]
  dict({
    '$defs': dict({
      'BookDescription': dict({
        'description': 'Description of a book and the content within.',
        'properties': dict({
          'code_name': dict({
            'title': 'Code Name',
            'type': 'string',
          }),
          'collection_descriptions': dict({
            'items': dict({
              '$ref': '#/$defs/CollectionDescription',
            }),
            'title': 'Collection Descriptions',
            'type': 'array',
          }),
          'name': dict({
            'title': 'Name',
            'type': 'string',
          }),
        }),
        'required': list([
          'name',
          'code_name',
          'collection_descriptions',
        ]),
        'title': 'BookDescription',
        'type': 'object',
      }),
      'CollectionDescription': dict({
        'description': 'Description of a collection of objects.',
        'properties': dict({
          'check_amount': dict({
            'anyOf': list([
              dict({
                'type': 'integer',
              }),
              dict({
                'type': 'null',
              }),
            ]),
            'default': None,
            'title': 'Check Amount',
          }),
          'data_source_description': dict({
            'description': 'Description of a source of data (e.g. a table).',
            'discriminator': dict({
              'mapping': dict({
                'html-table': '#/$defs/HTMLTableDataSourceDescription',
                'pdfplumber-table': '#/$defs/PDFPlumberDataSourceDescription',
                'tabula-table': '#/$defs/TabulaDataSourceDescription',
              }),
              'propertyName': 'type',
            }),
            'oneOf': list([
              dict({
                '$ref': '#/$defs/HTMLTableDataSourceDescription',
              }),
              dict({
                '$ref': '#/$defs/TabulaDataSourceDescription',
              }),
              dict({
                '$ref': '#/$defs/PDFPlumberDataSourceDescription',
              }),
            ]),
            'title': 'Data Source Description',
          }),
          'default_values': dict({
            'description': 'Default values for trav_obj fields (for e.g. item_type). Note: These are not validated.',
            'title': 'Default Values',
            'type': 'object',
          }),
          'instrument': dict({
            'allOf': list([
              dict({
                '$ref': '#/$defs/Instrument',
              }),
            ]),
            'description': 'Instrument objects with additional data.',
          }),
          'name': dict({
            'anyOf': list([
              dict({
                'type': 'string',
              }),
              dict({
                'type': 'null',
              }),
            ]),
            'default': None,
            'title': 'Name',
          }),
          'name_nth_largest_font': dict({
            'default': 1,
            'description': 'Text with the Nth largest font is used as the collection name.',
            'title': 'Name Nth Largest Font',
            'type': 'integer',
          }),
          'name_page': dict({
            'anyOf': list([
              dict({
                'type': 'integer',
              }),
              dict({
                'type': 'null',
              }),
            ]),
            'default': None,
            'description': 'Page number where the collection name is found (defaults to data source page, if available).',
            'title': 'Name Page',
          }),
          'type': dict({
            '$ref': '#/$defs/TravObjectType',
          }),
        }),
        'required': list([
          'type',
          'data_source_description',
        ]),
        'title': 'CollectionDescription',
        'type': 'object',
      }),
      'DataSourceDescriptionRoot': dict({
        'description': 'Description of a source of data (e.g. a table).',
        'discriminator': dict({
          'mapping': dict({
            'html-table': '#/$defs/HTMLTableDataSourceDescription',
            'pdfplumber-table': '#/$defs/PDFPlumberDataSourceDescription',
            'tabula-table': '#/$defs/TabulaDataSourceDescription',
          }),
          'propertyName': 'type',
        }),
        'oneOf': list([
          dict({
            '$ref': '#/$defs/HTMLTableDataSourceDescription',
          }),
          dict({
            '$ref': '#/$defs/TabulaDataSourceDescription',
          }),
          dict({
            '$ref': '#/$defs/PDFPlumberDataSourceDescription',
          }),
        ]),
        'title': 'Data Source Description',
      }),
      'HTMLTableDataSourceDescription': dict({
        'description': 'Description of getting data from exported HTML table.',
        'properties': dict({
          'pages': dict({
            'title': 'Pages',
            'type': 'string',
          }),
          'type': dict({
            'const': 'html-table',
            'enum': list([
              'html-table',
            ]),
            'title': 'Type',
            'type': 'string',
          }),
        }),
        'required': list([
          'type',
          'pages',
        ]),
        'title': 'HTMLTableDataSourceDescription',
        'type': 'object',
      }),
      'Instrument': dict({
        'description': 'Instrumentation settings for objects.',
        'properties': dict({
          'add_images': dict({
            'default': False,
            'title': 'Add Images',
            'type': 'boolean',
          }),
          'image_pages': dict({
            'items': dict({
              'type': 'integer',
            }),
            'title': 'Image Pages',
            'type': 'array',
          }),
        }),
        'title': 'Instrument',
        'type': 'object',
      }),
      'PDFPlumberDataSourceDescription': dict({
        'description': 'Description of getting data using pdfplumber.',
        'properties': dict({
          'page': dict({
            'title': 'Page',
            'type': 'integer',
          }),
          'page_table_number': dict({
            'default': 1,
            'description': 'The sequential number of the table on the page.',
            'title': 'Page Table Number',
            'type': 'integer',
          }),
          'table_settings': dict({
            'anyOf': list([
              dict({
                '$ref': '#/$defs/TableSettingsDict',
              }),
              dict({
                'type': 'null',
              }),
            ]),
            'default': None,
            'description': 'Settings for table extraction, used by pdfplumber.See https://github.com/jsvine/pdfplumber/blob/stable/README.md#table-extraction-settings',
          }),
          'type': dict({
            'const': 'pdfplumber-table',
            'enum': list([
              'pdfplumber-table',
            ]),
            'title': 'Type',
            'type': 'string',
          }),
        }),
        'required': list([
          'type',
          'page',
        ]),
        'title': 'PDFPlumberDataSourceDescription',
        'type': 'object',
      }),
      'TableSettingsDict': dict({
        'description': '''
          Settings for table extraction, used by pdfplumber.
          
          See https://github.com/jsvine/pdfplumber/blob/stable/README.md#table-extraction-settings
        ''',
        'properties': dict({
          'explicit_horizontal_lines': dict({
            'items': dict({
              'type': 'number',
            }),
            'title': 'Explicit Horizontal Lines',
            'type': 'array',
          }),
          'explicit_vertical_lines': dict({
            'items': dict({
              'type': 'number',
            }),
            'title': 'Explicit Vertical Lines',
            'type': 'array',
          }),
          'horizontal_strategy': dict({
            'enum': list([
              'lines',
              'lines_strict',
              'text',
              'explicit',
            ]),
            'title': 'Horizontal Strategy',
            'type': 'string',
          }),
          'intersection_x_tolerance': dict({
            'title': 'Intersection X Tolerance',
            'type': 'number',
          }),
          'intersection_y_tolerance': dict({
            'title': 'Intersection Y Tolerance',
            'type': 'number',
          }),
          'join_x_tolerance': dict({
            'title': 'Join X Tolerance',
            'type': 'number',
          }),
          'join_y_tolerance': dict({
            'title': 'Join Y Tolerance',
            'type': 'number',
          }),
          'min_words_horizontal': dict({
            'title': 'Min Words Horizontal',
            'type': 'integer',
          }),
          'min_words_vertical': dict({
            'title': 'Min Words Vertical',
            'type': 'integer',
          }),
          'snap_x_tolerance': dict({
            'title': 'Snap X Tolerance',
            'type': 'number',
          }),
          'snap_y_tolerance': dict({
            'title': 'Snap Y Tolerance',
            'type': 'number',
          }),
          'text_x_tolerance': dict({
            'title': 'Text X Tolerance',
            'type': 'number',
          }),
          'text_y_tolerance': dict({
            'title': 'Text Y Tolerance',
            'type': 'number',
          }),
          'vertical_strategy': dict({
            'enum': list([
              'lines',
              'lines_strict',
              'text',
              'explicit',
            ]),
            'title': 'Vertical Strategy',
            'type': 'string',
          }),
        }),
        'title': 'TableSettingsDict',
        'type': 'object',
      }),
      'TabulaDataSourceDescription': dict({
        'description': 'Description of getting data using Tabula.',
        'properties': dict({
          'area': dict({
            'anyOf': list([
              dict({
                'items': dict({
                  'type': 'number',
                }),
                'type': 'array',
              }),
              dict({
                'type': 'null',
              }),
            ]),
            'default': None,
            'description': 'Area of page to look for table in.',
            'title': 'Area',
          }),
          'extraction_method': dict({
            'anyOf': list([
              dict({
                'enum': list([
                  'lattice',
                  'stream',
                ]),
                'type': 'string',
              }),
              dict({
                'type': 'null',
              }),
            ]),
            'default': None,
            'title': 'Extraction Method',
          }),
          'page': dict({
            'title': 'Page',
            'type': 'integer',
          }),
          'page_table_number': dict({
            'default': 1,
            'description': 'The sequential number of the table on the page.',
            'title': 'Page Table Number',
            'type': 'integer',
          }),
          'type': dict({
            'const': 'tabula-table',
            'enum': list([
              'tabula-table',
            ]),
            'title': 'Type',
            'type': 'string',
          }),
        }),
        'required': list([
          'type',
          'page',
        ]),
        'title': 'TabulaDataSourceDescription',
        'type': 'object',
      }),
      'TravObjectType': dict({
        'description': 'Type of traveller object.',
        'enum': list([
          'character',
          'characteristic',
          'item',
          'skill',
        ]),
        'title': 'TravObjectType',
        'type': 'string',
      }),
    }),
    'description': '''
      Glossary of traveller-book-parser functional models.
      
      This is not a model itself but simply a collection of traveller-book-parser functional models.
    ''',
    'properties': dict({
      'book_description': dict({
        '$ref': '#/$defs/BookDescription',
      }),
      'collection_description': dict({
        '$ref': '#/$defs/CollectionDescription',
      }),
      'data_source_description': dict({
        '$ref': '#/$defs/DataSourceDescriptionRoot',
      }),
    }),
    'required': list([
      'book_description',
      'collection_description',
      'data_source_description',
    ]),
    'title': 'TravBookParserGlossary',
    'type': 'object',
  })
# ---
